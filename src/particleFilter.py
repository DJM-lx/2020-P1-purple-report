from joy.plans import Plan

class ParticleFilter( Plan ):

    def __init__( self , app , sensor , moveP ):
        self.sensor = sensor

    def behavior( self ):
        self.sensor.lastWaypoints[-1]

    def update( self , dist ):
        '''
        Takes in the complex vector traveled by the robot. Whenever this fuction
        is called, the state variables of the following should update:
            *the particle filter's best guess of the robot's coordinates
            *the Kalman filter's best guess for the the waypoint Coordinates
            *the boolean measure of how good the particle filter thinks it is
                (the output of useScan)
        '''
        pass

    def getWaypoints( self ):
        '''
        Returns the coordinates of the waypoint tags in the same format as
        sensor.lastWaypoints()

        Coordinates are Kalman filtered from  sensor.lastWaypoints  every time
        .update() is called
        '''
        pass

    def getRobotCoords( self ):
        '''
        Returns a tuple containing the current robot coordinates.

        Coordinates are generated by a particle filter that is updated when
        .update() is called
        '''
        pass

    def useScan( self ):
        '''
        Returns boolean true when the particle filter is not sure of the robot's
        current location
        '''
        pass
